openapi: 3.0.0
info:
  title: Admin Service API
  version: 1.0.1
  description: API for updating configuration and monitoring the health of services.
servers:
  - url: https://{hostname}/api_admin/
    variables:
      hostname:
        default: localhost
paths:
  /getServices:
    get:
      summary: Get all registered services
      operationId: getServices
      responses:
        '200':
          description: List of registered services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        401:
          description: Must be Signed in to do this operation
        403:
          description: Must be an Admin to do this
  /getServiceList/{serviceClass}:
    get:
      summary: Get services of a single class/instance
      operationId: getServiceList
      parameters:
        - name: serviceClass
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns list of all services of instance of service class passed in
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  /removeService:
    delete:
      summary: Remove an existing service instance
      operationId: removeService
      parameters:
        - name: id
          in: query
          description: ID of the service to remove
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Service removed successfully
        '404':
          description: Service not found
        401:
          description: Must be Signed In
        403:
          description: Must be an Admin to do this operation
        500:
          description: Server failed to remove service

  /serviceInfo:
    get:
      summary: Check service health
      operationId: getServiceInfo
      parameters:
        - name: instanceId
          in: query
          description: ID of service to get information about
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health information
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ServiceHealth'
        '404':
          description: Unable to find service under that name
        '401':
          description: Requires login
        '403':
          description: Must be Admin to check this

components:
  securitySchemes:
    keycloakOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://keycloak.example.com/realms/gominify/protocol/openid-connect/auth
          tokenUrl: https://keycloak.example.com/realms/gominify/protocol/openid-connect/token
          scopes:
            openid: OpenID Connect basic authentication
            admin: Admin scope for interacting with admin panel

  schemas:
    Service:
      type: object
      required:
        - id
        - name
        - url
        - leaseInformation
      properties:
        id:
          type: string
          example: service-123
        name:
          type: string
          example: storage-service
          description: name of the service class
        url:
          type: string
          format: uri
          example: http://storage.internal:8080

    ServiceHealth:
      type: object
      required:
        - service
        - status
        - leaseInformation
      properties:
        service:
          $ref: '#/components/schemas/Service'
        status:
          type: string
          enum: [healthy, sick, quiting]
        leaseInformation:
          type: string
          format: date-time



security:
  - keycloakOAuth: [openid, admin]