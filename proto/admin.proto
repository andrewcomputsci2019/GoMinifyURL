syntax = 'proto3';

import "google/protobuf/timestamp.proto";

option go_package = "internal/proto;proto";

enum NodeStatus {
  HEALTHY = 0;
  SICK    = 1;
  QUITING = 2;
}

message registrationMessage {
  string serviceName  = 1;
  // id of instance this needs to be unique
  string instanceName = 2;
  // dial addr is what is passed back to the client to connect to
  string dialAddr     = 3;
}

message registrationResponse{
  // this time is the amount of time a service has to
  int32 request_ttl = 1;
  uint64 seqStart = 2;
  uint64 nonce = 3;
}

message deRegistrationMessage {
  string instanceName = 1;
  uint64 nonce = 2;
}

message deRegistrationResponse {
  bool success = 1;
}

message HeartBeat {
  uint64 seqNumber     = 1;
  string instanceName = 2;
  NodeStatus status   = 3;
}

message HeartBeatResponse {
  //echo back seqNumber to client
  int64 ack = 1;
  oneof feedback{
    string error = 2;   // downstream error with processing (like unknown connection etc)
    string warning = 3; // ack lost etc
    string info = 4; // lease info etc
  }
  optional google.protobuf.Timestamp leaseExpiryTime = 5;
}

message serviceListRequest {
  string serviceName = 1;
}

message serviceInfo {
  string serviceName  =  1;
  string instanceName = 2;
  string dialAddr     = 3;
  NodeStatus latestStatus = 4;
}

message serviceListResponse{
  repeated serviceInfo instances = 1;
}

service discovery {
  rpc registerService(registrationMessage) returns (registrationResponse){};
  rpc heartbeat (stream HeartBeat) returns (stream HeartBeatResponse){};
  rpc requestServiceList(serviceListRequest) returns (serviceListResponse){};
  rpc deRegisterService(deRegistrationMessage) returns (deRegistrationResponse){};
}
