//go:build go1.22

// Package analytics provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package analytics

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	KeycloakOAuthScopes = "keycloakOAuth.Scopes"
)

// GetUserTopUrlsParams defines parameters for GetUserTopUrls.
type GetUserTopUrlsParams struct {
	// Limit Number of top URLs to return (default: 10, max: 20)
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get detailed analytics for a shortened URL
	// (GET /url/{shortId}/stats)
	GetDetailedUrlStats(w http.ResponseWriter, r *http.Request, shortId string)
	// Get country-level click summary for authenticated user's links
	// (GET /user/geo)
	GetUserGeoSummary(w http.ResponseWriter, r *http.Request)
	// Get referral graph for authenticated user's short URLs
	// (GET /user/referrals)
	GetUserReferralGraph(w http.ResponseWriter, r *http.Request)
	// Get top K most-clicked short URLs for the authenticated user
	// (GET /user/top)
	GetUserTopUrls(w http.ResponseWriter, r *http.Request, params GetUserTopUrlsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDetailedUrlStats operation middleware
func (siw *ServerInterfaceWrapper) GetDetailedUrlStats(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "shortId" -------------
	var shortId string

	err = runtime.BindStyledParameterWithOptions("simple", "shortId", r.PathValue("shortId"), &shortId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shortId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDetailedUrlStats(w, r, shortId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserGeoSummary operation middleware
func (siw *ServerInterfaceWrapper) GetUserGeoSummary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserGeoSummary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserReferralGraph operation middleware
func (siw *ServerInterfaceWrapper) GetUserReferralGraph(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserReferralGraph(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserTopUrls operation middleware
func (siw *ServerInterfaceWrapper) GetUserTopUrls(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserTopUrlsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserTopUrls(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/url/{shortId}/stats", wrapper.GetDetailedUrlStats)
	m.HandleFunc("GET "+options.BaseURL+"/user/geo", wrapper.GetUserGeoSummary)
	m.HandleFunc("GET "+options.BaseURL+"/user/referrals", wrapper.GetUserReferralGraph)
	m.HandleFunc("GET "+options.BaseURL+"/user/top", wrapper.GetUserTopUrls)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RX3W7bOBN9lQFvvhRwLDsteqG7fuluELS7WST1xaIpUJoaW6wpkiVHSVXDwF7tA+y+",
	"YZ9kMZTknzpOf3NliBrOnJk5ZzReCuUq7yxaiiJfioiqDpqaK1VihelogY0yTi4untVU8sHMuNv0RtZU",
	"uqA/StLOnroC9w4nwYhclEQ+5lnWexriB1l5g0PlqiygNFXM5q7SVs+azAdHTjmTOY9WF8fKWYuKMvYr",
	"BiIq51tc7XuRiwuP9vw5nLaGMJVRK2BztKRVwiFWA0FugT8TUPInVuy58Shy4TjmiVjxkbYzxyALjCpo",
	"nzDk4pmVpiGtIkivYeYCnLnfUpTJ5cshTCJGeIHNKWNKr7ukSZPhCFvWINe+nv1xLgbiBkNso4yHo+GI",
	"M2bA0muRi8fD0fCJGAgvqUzFy+pgsmUsXaDzYpVFkm3/50j7sC+R6mAjzNGBtAUEnGEI0sA0oFwU7tbG",
	"Fi1EbecGIfkFzunaXljTgFQKY9RTgzBtgEoEd2sxgJulh9ZSJMQhNeycG3uG9BxJaoPFJJirhJFzCLJC",
	"whBF/nopNCPkvMRAWFlxmbq0xEAEfF/rgIXIKdTI7Cmxkpxh17NIQdu5WK3esHH0zsaWXSejEf8oZwlt",
	"qon03nR0yt5FLsxyy58PjJ10e1sZrRbx/82pqy2Fho80YRXvsGSLLUDaEs4xcPvU5vLnaDecm75DRWJz",
	"IEOQDT/3TYrfF7y9juE7o/ct2L/NQiRpTlOF7oq9756PdhnZ02KjAnb8ZDTeJ+/E9hMJi9bo8b7Rry5M",
	"dVGghU9//Qt1xACFwwjWETO1J2l7/8kdQS5fJtuZq22RUugHaeLoZyP0dT+73jDtYl1VktvMfIdiL7Ne",
	"WlxRtFi0QFYDkTHObI7ui8KVG6Wy5BI7ITU/sh47ooFUwcUI0phemBzhf3E3dhxe20nEWW0Sshsda2n0",
	"R23nIOtCo1UIxrVCgSMczocDKFFSJT24AF4jqFIGenRA8pOI4QzdVVeWH9Tll5i/W7Df62rajqVWwTAL",
	"rgIqdeyLJAb3K3XX36tbd2yQCMO6yMoVCEfnVxfwePz06fEYpPGlPD55tPH89ULbV0Y3cY4N3qDpOt0z",
	"7Osk8gPkVYeDrz9n3UcZi55cRttF3CL0zuD6Aq3nQfqS29WPK/j09z+bzw8ENIkYsdS+FRKzWtUhoKUd",
	"AMNr+4tUJTBfQNsiYYxQuluopG2SbWSya4YuYa5v0HaR2EHLFAnRo9IzrdaI7mH5ZZfpGWfx0ET/phF/",
	"3wD/Hlb2mXYNKyTJh2dj2A16kIBrumyzkJz/Cv4FaRdYgNGR+pF5Z4jKRTpOesBiK97w2v7palDSdrxp",
	"NoQjByHFgZq3quT7rdGVprewXoHgqJIfdFVXOZyM7huor5yfBHPH+nRo/pHzCeIWjqMCZ7I2lMN4NIBK",
	"fkhBU8y0hL2vMc3HbgtLWMX2ztXdF/l4NBAdcJGf8IO27cN4f7z+8Gp2SBncjtPD8vi5CnjlPLxoN4tU",
	"Vv7sbj7DDy8GSvEP8HA9GffJ2+byDVEx3PTcqnf+bC1LF4m5scrWu03Gf1xk0HJq2qb0Njt0EbxOGH7F",
	"aN6s/gsAAP//owJscbUOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
