// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Discovery_RegisterService_FullMethodName    = "/discovery/registerService"
	Discovery_Heartbeat_FullMethodName          = "/discovery/heartbeat"
	Discovery_RequestServiceList_FullMethodName = "/discovery/requestServiceList"
	Discovery_DeRegisterService_FullMethodName  = "/discovery/deRegisterService"
)

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	RegisterService(ctx context.Context, in *RegistrationMessage, opts ...grpc.CallOption) (*RegistrationResponse, error)
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartBeat, HeartBeatResponse], error)
	RequestServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error)
	DeRegisterService(ctx context.Context, in *DeRegistrationMessage, opts ...grpc.CallOption) (*DeRegistrationResponse, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) RegisterService(ctx context.Context, in *RegistrationMessage, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, Discovery_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartBeat, HeartBeatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Discovery_ServiceDesc.Streams[0], Discovery_Heartbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HeartBeat, HeartBeatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Discovery_HeartbeatClient = grpc.BidiStreamingClient[HeartBeat, HeartBeatResponse]

func (c *discoveryClient) RequestServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceListResponse)
	err := c.cc.Invoke(ctx, Discovery_RequestServiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) DeRegisterService(ctx context.Context, in *DeRegistrationMessage, opts ...grpc.CallOption) (*DeRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeRegistrationResponse)
	err := c.cc.Invoke(ctx, Discovery_DeRegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations must embed UnimplementedDiscoveryServer
// for forward compatibility.
type DiscoveryServer interface {
	RegisterService(context.Context, *RegistrationMessage) (*RegistrationResponse, error)
	Heartbeat(grpc.BidiStreamingServer[HeartBeat, HeartBeatResponse]) error
	RequestServiceList(context.Context, *ServiceListRequest) (*ServiceListResponse, error)
	DeRegisterService(context.Context, *DeRegistrationMessage) (*DeRegistrationResponse, error)
	mustEmbedUnimplementedDiscoveryServer()
}

// UnimplementedDiscoveryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscoveryServer struct{}

func (UnimplementedDiscoveryServer) RegisterService(context.Context, *RegistrationMessage) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedDiscoveryServer) Heartbeat(grpc.BidiStreamingServer[HeartBeat, HeartBeatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedDiscoveryServer) RequestServiceList(context.Context, *ServiceListRequest) (*ServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestServiceList not implemented")
}
func (UnimplementedDiscoveryServer) DeRegisterService(context.Context, *DeRegistrationMessage) (*DeRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegisterService not implemented")
}
func (UnimplementedDiscoveryServer) mustEmbedUnimplementedDiscoveryServer() {}
func (UnimplementedDiscoveryServer) testEmbeddedByValue()                   {}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	// If the following call pancis, it indicates UnimplementedDiscoveryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discovery_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).RegisterService(ctx, req.(*RegistrationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServer).Heartbeat(&grpc.GenericServerStream[HeartBeat, HeartBeatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Discovery_HeartbeatServer = grpc.BidiStreamingServer[HeartBeat, HeartBeatResponse]

func _Discovery_RequestServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).RequestServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discovery_RequestServiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).RequestServiceList(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_DeRegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeRegistrationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).DeRegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Discovery_DeRegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).DeRegisterService(ctx, req.(*DeRegistrationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerService",
			Handler:    _Discovery_RegisterService_Handler,
		},
		{
			MethodName: "requestServiceList",
			Handler:    _Discovery_RequestServiceList_Handler,
		},
		{
			MethodName: "deRegisterService",
			Handler:    _Discovery_DeRegisterService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "heartbeat",
			Handler:       _Discovery_Heartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "admin.proto",
}
