//go:build go1.22

// Package shortener provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package shortener

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	KeycloakOAuthScopes = "keycloakOAuth.Scopes"
)

// RedirectParams defines parameters for Redirect.
type RedirectParams struct {
	Url string `form:"url" json:"url"`
}

// ShrinkUrlJSONBody defines parameters for ShrinkUrl.
type ShrinkUrlJSONBody struct {
	Url string `json:"url"`
}

// ShrinkUrlJSONRequestBody defines body for ShrinkUrl for application/json ContentType.
type ShrinkUrlJSONRequestBody ShrinkUrlJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Redirect to long URL
	// (GET /)
	Redirect(w http.ResponseWriter, r *http.Request, params RedirectParams)
	// Shorten a URL
	// (POST /shrink)
	ShrinkUrl(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Redirect operation middleware
func (siw *ServerInterfaceWrapper) Redirect(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RedirectParams

	// ------------- Required query parameter "url" -------------

	if paramValue := r.URL.Query().Get("url"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "url"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "url", r.URL.Query(), &params.Url)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "url", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Redirect(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ShrinkUrl operation middleware
func (siw *ServerInterfaceWrapper) ShrinkUrl(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "url:write"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShrinkUrl(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.Redirect)
	m.HandleFunc("POST "+options.BaseURL+"/shrink", wrapper.ShrinkUrl)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUTW/cNhD9K8ScVWnt5KSb20Nh9CuIsSd3UdDU7IoxxWGGw03Vhf57MdKu4418KNBc",
	"dCCpN2/eezMncDQkihglQ3uCjK6wl/HB9TjgfPSMowtkn/+4K9LrwT7Ql/nGFumJ/T9WPMWfqMPV4ZYD",
	"tNCLpNw2zQWpxr/tkALWjoaG0YYhNwcafPT7sXBoEpOQo9BQwui7HxzFiE4ahYYKsqO0UFvuoYU75zBn",
	"M1Jh4zuM4mWECgqH9gt7QX3y5IOX0QiZVMQUDtn4KGTymAUHmCoQesbvTHmGhEnBx6Q0SJu4hUmPfNyT",
	"ttFhduyTCqZEjcIONpjtx19N7okFo48Hk5GP3mFtthmz+eXMzOyJjYJq125Wvf4zQgXiJWjFn+m3maai",
	"PcxobO4+3EMFR+S81LypN/WNSqD0bfLQwrt6U2+ggmSln8Vu9HNAWTP+UJ6CdwZjl8hHMdJbMYydZ3SS",
	"TcnI2eyZBmOXfkwO5VDDXI5nyvfq4sfzL3NVtgMKcob28QRey3wuyOpqtIP2VThABYyfi2fsoBUuqOHo",
	"cbDK8Sx4FvbxANO008c5UcxLeN5tbtetXChoTIj9wcfFB9Xm/eb9+offScyeSuxmky/jA+3jroJchsHy",
	"+A1soHhYIKcKmtyzj8+Kmyi/oe3dV2exO0vpbLzkwtgXvLWeDzP29kUnzPIjdaMWcRQF41zPphTOwWk+",
	"ZS16eqViYsUUv2immusGIB6szB54qFZKv3blcf5n9zX/T5/U4en6lXo3fePP7WbzP5jO+vx15rsm+Aab",
	"a92XSYnYzVPoGFX/JQWbtUv38WiD74yPqcjy6mb9ahsvyxFXcVnt2cfLdnu9xnbTVaweXkKw5Om/Qi4w",
	"yMfLfJWrpXfqKYtO2dToLqjgaNnbp7Aoe7lc+tvbEjQJgZwNeqU0dtO/AQAA///hfYCnWAYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
