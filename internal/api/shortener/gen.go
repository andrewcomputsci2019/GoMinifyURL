//go:build go1.22

// Package shortener provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package shortener

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	KeycloakOAuthScopes = "keycloakOAuth.Scopes"
)

// ShrinkUrlJSONBody defines parameters for ShrinkUrl.
type ShrinkUrlJSONBody struct {
	Url string `json:"url"`
}

// ShrinkUrlJSONRequestBody defines body for ShrinkUrl for application/json ContentType.
type ShrinkUrlJSONRequestBody ShrinkUrlJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Shorten a URL
	// (POST /shrink)
	ShrinkUrl(w http.ResponseWriter, r *http.Request)
	// Redirect to long URL
	// (GET /{url})
	Redirect(w http.ResponseWriter, r *http.Request, url string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ShrinkUrl operation middleware
func (siw *ServerInterfaceWrapper) ShrinkUrl(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "url:write"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ShrinkUrl(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Redirect operation middleware
func (siw *ServerInterfaceWrapper) Redirect(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "url" -------------
	var url string

	err = runtime.BindStyledParameterWithOptions("simple", "url", r.PathValue("url"), &url, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "url", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Redirect(w, r, url)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/shrink", wrapper.ShrinkUrl)
	m.HandleFunc("GET "+options.BaseURL+"/{url}", wrapper.Redirect)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUTW/kNgz9KwLPrj3J7sm3tIci6Ndig5zSQaHInLE2sqhSVLbuYP57QXm8k2RyKNDe",
	"DEl+fHzvkQdwNCWKGCVDf4CMrrCX+c6NOGE9esLZBbJPv90UGfVgF+hrvbFFRmL/txVP8Qca8OLwngP0",
	"MIqk3HfditTiX3ZKAVtHU8dow5S7PU0++t1cOHSJSchR6Chh9MN3jmJEJ51CQwPZUVqoLffQw41zmLOZ",
	"qbDxA0bxMkMDhUP/lb2gPnn0wctshEwqYgqHbHwUMnnOghMcGxB6wv+ZcoWEo4LPSWmQNnENRz3ycUfa",
	"xoDZsU8qmBI1CjvZYO4//2zySCwYfdybjPzsHbbmPmM2P52YmR2xUVDt2lXV298jNCBeglb8kX6pNBXt",
	"rqKxufl0Cw08I+el5lW7aa9UAqVvk4cePrSbdgMNJCtjFbvLI/v4pJ+JsrxD/EwCB1MycjbOxrUFY02g",
	"uNeuWqiVuLK9VQPvKrZq3wDjnwWzfE/DrEUcRcFY69mUwqnH7kvWogfImlRbWbFiil+yUdTHA+yIJyvQ",
	"Q2EP31zIwj7uqy9azTMO0D/Uf7Znqx6/oJPFqvMr4YL1ICeKeal1vdn8B6ZVnz9OfC8JvsPmte6LqRGH",
	"GhjHqPqrmR8XWq9f38ZnG/xgfExFlldXl6/u4zrHCnVsvi0G6B8uVsLDOogvJ2573DaQyzRZns8kjVWS",
	"FbE7FA5HLb3Hd9L0qTwG7wzGIZGPYmS0YhgHz+gkn+K1Y5qMXRJmcij7y2R9Pv1So8x2QkHOtQuvZTTe",
	"0EC0E9aQrAE8m928MO6tO9s3Qfiwub7sZGWgq4fY731cZnsR/+PlD7+SmB2VeKH8K0Vfwq6DtcTjX3m1",
	"+IP8vMpRXi2+w0hZVJVjtyfdFZa9fQxLm+vdQn1nS9AJC+Rs0CtlsT3+EwAA//8utDBeWwYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
