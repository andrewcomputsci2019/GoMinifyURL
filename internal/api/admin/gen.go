//go:build go1.22

// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package admin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	KeycloakOAuthScopes = "keycloakOAuth.Scopes"
)

// Defines values for ServiceHealthStatus.
const (
	Degraded ServiceHealthStatus = "degraded"
	Down     ServiceHealthStatus = "down"
	Healthy  ServiceHealthStatus = "healthy"
)

// Service defines model for Service.
type Service struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Url  string `json:"url"`
}

// ServiceHealth defines model for ServiceHealth.
type ServiceHealth struct {
	Id          *string              `json:"id,omitempty"`
	LastChecked *time.Time           `json:"lastChecked,omitempty"`
	Name        *string              `json:"name,omitempty"`
	Status      *ServiceHealthStatus `json:"status,omitempty"`
}

// ServiceHealthStatus defines model for ServiceHealth.Status.
type ServiceHealthStatus string

// CheckHealthParams defines parameters for CheckHealth.
type CheckHealthParams struct {
	// Id ID of service to get health for (optional)
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// RemoveServiceParams defines parameters for RemoveService.
type RemoveServiceParams struct {
	// Id ID of the service to remove
	Id string `form:"id" json:"id"`
}

// AddServiceJSONRequestBody defines body for AddService for application/json ContentType.
type AddServiceJSONRequestBody = Service

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register a new service
	// (POST /addService)
	AddService(w http.ResponseWriter, r *http.Request)
	// Get all registered services
	// (GET /getServices)
	GetServices(w http.ResponseWriter, r *http.Request)
	// Check service health
	// (GET /health)
	CheckHealth(w http.ResponseWriter, r *http.Request, params CheckHealthParams)
	// Remove an existing service
	// (DELETE /removeService)
	RemoveService(w http.ResponseWriter, r *http.Request, params RemoveServiceParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddService operation middleware
func (siw *ServerInterfaceWrapper) AddService(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddService(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CheckHealth operation middleware
func (siw *ServerInterfaceWrapper) CheckHealth(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckHealthParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckHealth(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveService operation middleware
func (siw *ServerInterfaceWrapper) RemoveService(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveServiceParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveService(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/addService", wrapper.AddService)
	m.HandleFunc("GET "+options.BaseURL+"/getServices", wrapper.GetServices)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.CheckHealth)
	m.HandleFunc("DELETE "+options.BaseURL+"/removeService", wrapper.RemoveService)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTW/cNhP+K8S876EF5NXaySHQzXWA1EBRBwl6MhYFTY5WjCmOQo7sqMb+92Ioab1f",
	"Dpy2F68gzQyfj5mhn8BQ21HAwAmqJ0imwVbnx88YH5xBeewidRjZYf7grPzFb7rtPEIFaQw8O794AwXw",
	"0OWXHF1Yw6aAoFs8SGCKeo1nU+KppD76/ZyGuavKckpduMAYg/bVu+W7JRRQU2w1QwV9dMf1NgVE/Nq7",
	"iBaqWyEwwRoPWm0T6O4LGhYAE/tfUXtuXtLgCLbXia8aNPeYv29RWc14xq7F7wl09CGx5j4fh6FvBXmT",
	"4QxQgMV11BaFiaXHsMNhh/QBKymJpo+Oh8/i80jlHgfjSd/fXPYj09rTY/6ie24our80OwpXZPHo5R9i",
	"U/YmVWU5V1pMti0MtWVE7dtUrql1wdVD2UViMuRL6jA4e2YoBDRcSl0oIBnqRlzati5ABZfyq/J7VVNU",
	"2Xpt2IW1enTcqByoOh3QQwFjWajgpsNw/V5djfXVnU7OKDkFAzuT4YvITPf4X/LI9fbUlzMvYCOvXKhJ",
	"uFlMJrouY6jg8uN1ZtZ3VmdahkLt1n3MIJUOVrUUHJMYq7hBNfaBolpNM5QW0lmO86yMik0drC4/XkMB",
	"DxjTeNr5Yrk4F+YCXHcOKnizWC5kijrNTda+1Nbuzj8lll+ZgIzp2uZjtjHjfGHiX8gOEmkoMIacpLvO",
	"T3qXX5JAmNeMPP0/Yg0V/K983kPltITKuXqWbl+y3/Fxpq6YVMS1S4wRdgedY4958lNHIY1NdbE8P9Z/",
	"Vkpbi1al3hhMqe69H8aZ6dtWxwEq+DQdo7QKzwByULlGnurkg9Z4QrEPOzFHwJY/pJtjbNOrBdw2o45R",
	"D6cE/c0lln6alRQhZqj7InxAVtr7FyPLZrszT4qQ9+O0V6Xlom6RMSaobg+NuX6/0+Li8xp57n0ZmJ8o",
	"R2r/M8hsQQVfe4zDvN2rcdM/i3a4IVf/0gQKeFNn3K9wYaK8KX7MvG3agYWrEyaOsUq2jFw8ecPteZe1",
	"3wo6GZVNi9jSA+7MvEWPjMf2fdoLfJWBsrH2hlUqfM+x/Rn+Bw6enu/x4MMJL+Dt8u3LSYFY1dQHe7QL",
	"pJjSQeE3l/LaTrv7ar5psyoHd+ztfEsV0y23EiKSPsvY711ITw0lFoE2pe7cnzmnlKWuo9N3fqQ+x4xU",
	"at17+c/Dk9FePgmq1ebvAAAA//8zzoXI8AkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
