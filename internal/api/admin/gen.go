//go:build go1.22

// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package admin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	KeycloakOAuthScopes = "keycloakOAuth.Scopes"
)

// Defines values for ServiceHealthStatus.
const (
	Healthy ServiceHealthStatus = "healthy"
	Quiting ServiceHealthStatus = "quiting"
	Sick    ServiceHealthStatus = "sick"
)

// Service defines model for Service.
type Service struct {
	Id string `json:"id"`

	// Name name of the service class
	Name string `json:"name"`
	Url  string `json:"url"`
}

// ServiceHealth defines model for ServiceHealth.
type ServiceHealth struct {
	Id               *string    `json:"id,omitempty"`
	LeaseInformation *time.Time `json:"leaseInformation,omitempty"`

	// Name name of the service class
	Name   *string              `json:"name,omitempty"`
	Status *ServiceHealthStatus `json:"status,omitempty"`
}

// ServiceHealthStatus defines model for ServiceHealth.Status.
type ServiceHealthStatus string

// RemoveServiceParams defines parameters for RemoveService.
type RemoveServiceParams struct {
	// Id ID of the service to remove
	Id string `form:"id" json:"id"`
}

// GetServiceInfoParams defines parameters for GetServiceInfo.
type GetServiceInfoParams struct {
	// InstanceId ID of service to get information about
	InstanceId string `form:"instanceId" json:"instanceId"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get services of a single class/instance
	// (GET /getServiceList/{serviceClass})
	GetServiceList(w http.ResponseWriter, r *http.Request, serviceClass string)
	// Get all registered services
	// (GET /getServices)
	GetServices(w http.ResponseWriter, r *http.Request)
	// Remove an existing service instance
	// (DELETE /removeService)
	RemoveService(w http.ResponseWriter, r *http.Request, params RemoveServiceParams)
	// Check service health
	// (GET /serviceInfo)
	GetServiceInfo(w http.ResponseWriter, r *http.Request, params GetServiceInfoParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetServiceList operation middleware
func (siw *ServerInterfaceWrapper) GetServiceList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "serviceClass" -------------
	var serviceClass string

	err = runtime.BindStyledParameterWithOptions("simple", "serviceClass", r.PathValue("serviceClass"), &serviceClass, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "serviceClass", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceList(w, r, serviceClass)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServices operation middleware
func (siw *ServerInterfaceWrapper) GetServices(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveService operation middleware
func (siw *ServerInterfaceWrapper) RemoveService(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveServiceParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveService(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetServiceInfo operation middleware
func (siw *ServerInterfaceWrapper) GetServiceInfo(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, KeycloakOAuthScopes, []string{"openid", "admin"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetServiceInfoParams

	// ------------- Required query parameter "instanceId" -------------

	if paramValue := r.URL.Query().Get("instanceId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "instanceId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "instanceId", r.URL.Query(), &params.InstanceId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instanceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetServiceInfo(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/getServiceList/{serviceClass}", wrapper.GetServiceList)
	m.HandleFunc("GET "+options.BaseURL+"/getServices", wrapper.GetServices)
	m.HandleFunc("DELETE "+options.BaseURL+"/removeService", wrapper.RemoveService)
	m.HandleFunc("GET "+options.BaseURL+"/serviceInfo", wrapper.GetServiceInfo)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWTW/bOBP+KwTf96hYTtJDoVuQArsGumiRoKcgWDDUyJqGIhVymNZr+L8vhqQ/ZCdo",
	"sF2ge4kcivP1PM+MZi21G0ZnwVKQzVoG3cOg0s9b8M+ogX+O3o3gCSG9wJb/wnc1jAZkI0O+eHZ+cSkr",
	"SasxHZJHu5SbSlo1JCctBO1xJHRWNulUuE5QD6I4ENqoEGR16JqcV0s4Kzdech+9mabTE41NXRfTGVoC",
	"b5Vp3s/fz2UlO+cHRbKR0eOpv00lPTxF9NDK5o5LLQXkQJU0oAIsbPbCpdzvfLiHr6CJcyrQ/Q7KUP/T",
	"AJ6EbNb7KlpFcEY4wC+APpCimCoCGwfGq08Vr2QlA+pHWcmniMS3719C+gg39gg6eqTVLcswg/UIK22c",
	"evx0FTOWnXHf0hsVqXce/0qgXLsWTg6/sDaSIEJT11tPs1LkTLuh9qDMEOqlG9Bit6pH78hpZ2o3gsX2",
	"TDtrQVPNfrks7cacl2oHZDSv+CnSueicF0lvSnPV4htSL9JFMSoLrJ/sVjby0wh28UFcZ//iQQXUgqOA",
	"JdSZaMbIPcK/WUfyN0GfY17IDR+h7dypXq4+L1JlcWxVKks72+Ey+pSkULYVg7NIjolNqsoyYI0V9YQZ",
	"6wcpKSsjVnpEXH1eyEo+gw852vlsPjvnyjlxNaJs5OVsPuPWHRX1Cft6CVTsP2Kgel3CXLOKN3xjCcQP",
	"7rqU5YIh/21ilRx6NQCBD7K5W8vEJwfZNv2uNa9Le+xnA/kIVRmXHOlY3fd8OYzOhiyXi/mcH9pZApty",
	"U+NoCtH115Dbeu8PCYZk+H8PnWzk/+r9oK7LlK63I3rPpvJerTKZUxJvgKK3QRgMxMQoY3bk8P9oAymr",
	"4YC0PBTEqEKAVmBWTYjDoPwqoznxoERAuzTFrN46TFYHhIU30JOh/g+h97Gg5mGJgcBDuyudzd/Nz0/b",
	"5o8YSDyAuMWlTfgJcqJ1gnoMYld5Nr983VxZkRtmb/0CEUzni8kx+B4G9wwH3/MWDBCcMnAzuXjSH9ME",
	"Fx+OPyLkRA4lq9xLTxH8at9M6Wv60y00zWI7RnLgVoSoNYTQRWNWb6Vm8Y9YOObw3evJWUeic9G2R8xl",
	"vNk5fMeQZusWy2n7lNNFmc8/aJ907U3sHTC3BBK4XzKEenCRXiOyJLdof81MnK5T4XjbekPTl8tp5ZhA",
	"+6aB8dLycjIzcohDTF/V402GMAjjlvhjMe6UqHvQj2UkvCLBL1Y9mERwh3Y3GES0LXhBvSKROJ3q8jr5",
	"3d7tC1aHC1pS1NFqdrddbqqyHN0z4+xlK8E42WPWvQvE0Te1GvHPZFPzLqA8ctKJ3O2dXFmnouGt1zit",
	"DL/irO43fwcAAP//AXePe8YMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
